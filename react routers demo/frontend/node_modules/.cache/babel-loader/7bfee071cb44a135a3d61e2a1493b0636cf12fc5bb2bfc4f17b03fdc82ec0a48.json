{"ast":null,"code":"var _jsxFileName = \"/Users/a/Desktop/React Projects/routers/routers-project/frontend/src/pages/EventDetail.js\",\n  _s = $RefreshSig$();\nimport { json, redirect, useRouteLoaderData } from 'react-router-dom';\nimport EventItem from '../components/EventItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventDetailPage() {\n  _s();\n  const data = useRouteLoaderData(\"event-detail\");\n  return /*#__PURE__*/_jsxDEV(EventItem, {\n    event: data.event\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n}\n_s(EventDetailPage, \"4DBW6nwrvXRMSwRBgIay5Sszcp8=\", false, function () {\n  return [useRouteLoaderData];\n});\n_c = EventDetailPage;\nexport default EventDetailPage;\nasync function loadEvent(id) {}\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    // return { isError: true, message: 'Could not fetch events.' };\n    // throw new Response(JSON.stringify({ message: 'Could not fetch events.' }), {\n    //   status: 500,\n    // });\n    throw json({\n      message: 'Could not fetch events.'\n    }, {\n      status: 500\n    });\n  } else {\n    const resData = await response.json();\n    return resData.events;\n  }\n}\nexport async function loader({\n  request,\n  params\n}) {\n  const id = params.eventId;\n  const response = await fetch('http://localhost:8080/events/' + id);\n  if (!response.ok) {\n    throw json({\n      message: 'Could not fetch details for selected event.'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport async function action({\n  params,\n  request\n}) {\n  const eventId = params.eventId;\n  const response = await fetch('http://localhost:8080/events/' + eventId, {\n    method: request.method\n  });\n  if (!response.ok) {\n    throw json({\n      message: 'Could not delete the event.'\n    }, {\n      status: 500\n    });\n  }\n  return redirect('/events');\n}\nvar _c;\n$RefreshReg$(_c, \"EventDetailPage\");","map":{"version":3,"names":["json","redirect","useRouteLoaderData","EventItem","jsxDEV","_jsxDEV","EventDetailPage","_s","data","event","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvent","id","loadEvents","response","fetch","ok","message","status","resData","events","loader","request","params","eventId","action","method","$RefreshReg$"],"sources":["/Users/a/Desktop/React Projects/routers/routers-project/frontend/src/pages/EventDetail.js"],"sourcesContent":["import {json, redirect, useRouteLoaderData} from 'react-router-dom';\n\nimport EventItem from '../components/EventItem';\n\nfunction EventDetailPage() {\n    const data = useRouteLoaderData(\"event-detail\");\n\n    return (\n        <EventItem event={data.event} />\n    );\n}\n\nexport default EventDetailPage;\n\nasync function loadEvent(id) {\n\n}\n\nasync function loadEvents() {\n    const response = await fetch('http://localhost:8080/events');\n\n    if (!response.ok) {\n        // return { isError: true, message: 'Could not fetch events.' };\n        // throw new Response(JSON.stringify({ message: 'Could not fetch events.' }), {\n        //   status: 500,\n        // });\n        throw json(\n            { message: 'Could not fetch events.' },\n            {\n                status: 500,\n            }\n        );\n    } else {\n        const resData = await response.json();\n        return resData.events;\n    }\n}\n\nexport async function loader({request, params}) {\n    const id = params.eventId;\n    const response = await fetch('http://localhost:8080/events/' + id);\n\n    if (!response.ok) {\n        throw json({message: 'Could not fetch details for selected event.'}, {\n            status: 500\n        })\n    } else {\n        return response;\n    }\n}\n\nexport async function action({params, request}) {\n    const eventId = params.eventId;\n    const response  = await fetch('http://localhost:8080/events/' + eventId, {\n        method: request.method,\n    });\n    if(!response.ok){\n        throw json(\n            {message: 'Could not delete the event.'},\n            {\n                status: 500\n            }\n        )\n    }\n    return redirect('/events');\n}"],"mappings":";;AAAA,SAAQA,IAAI,EAAEC,QAAQ,EAAEC,kBAAkB,QAAO,kBAAkB;AAEnE,OAAOC,SAAS,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACvB,MAAMC,IAAI,GAAGN,kBAAkB,CAAC,cAAc,CAAC;EAE/C,oBACIG,OAAA,CAACF,SAAS;IAACM,KAAK,EAAED,IAAI,CAACC;EAAM;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAExC;AAACN,EAAA,CANQD,eAAe;EAAA,QACPJ,kBAAkB;AAAA;AAAAY,EAAA,GAD1BR,eAAe;AAQxB,eAAeA,eAAe;AAE9B,eAAeS,SAASA,CAACC,EAAE,EAAE,CAE7B;AAEA,eAAeC,UAAUA,CAAA,EAAG;EACxB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACd;IACA;IACA;IACA;IACA,MAAMpB,IAAI,CACN;MAAEqB,OAAO,EAAE;IAA0B,CAAC,EACtC;MACIC,MAAM,EAAE;IACZ,CACJ,CAAC;EACL,CAAC,MAAM;IACH,MAAMC,OAAO,GAAG,MAAML,QAAQ,CAAClB,IAAI,CAAC,CAAC;IACrC,OAAOuB,OAAO,CAACC,MAAM;EACzB;AACJ;AAEA,OAAO,eAAeC,MAAMA,CAAC;EAACC,OAAO;EAAEC;AAAM,CAAC,EAAE;EAC5C,MAAMX,EAAE,GAAGW,MAAM,CAACC,OAAO;EACzB,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,GAAGH,EAAE,CAAC;EAElE,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;IACd,MAAMpB,IAAI,CAAC;MAACqB,OAAO,EAAE;IAA6C,CAAC,EAAE;MACjEC,MAAM,EAAE;IACZ,CAAC,CAAC;EACN,CAAC,MAAM;IACH,OAAOJ,QAAQ;EACnB;AACJ;AAEA,OAAO,eAAeW,MAAMA,CAAC;EAACF,MAAM;EAAED;AAAO,CAAC,EAAE;EAC5C,MAAME,OAAO,GAAGD,MAAM,CAACC,OAAO;EAC9B,MAAMV,QAAQ,GAAI,MAAMC,KAAK,CAAC,+BAA+B,GAAGS,OAAO,EAAE;IACrEE,MAAM,EAAEJ,OAAO,CAACI;EACpB,CAAC,CAAC;EACF,IAAG,CAACZ,QAAQ,CAACE,EAAE,EAAC;IACZ,MAAMpB,IAAI,CACN;MAACqB,OAAO,EAAE;IAA6B,CAAC,EACxC;MACIC,MAAM,EAAE;IACZ,CACJ,CAAC;EACL;EACA,OAAOrB,QAAQ,CAAC,SAAS,CAAC;AAC9B;AAAC,IAAAa,EAAA;AAAAiB,YAAA,CAAAjB,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}