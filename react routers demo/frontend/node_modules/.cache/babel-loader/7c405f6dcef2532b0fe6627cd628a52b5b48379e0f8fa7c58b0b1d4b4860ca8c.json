{"ast":null,"code":"var _jsxFileName = \"/Users/a/Desktop/React Projects/routers/routers-project/frontend/src/pages/Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json, defer, Await } from \"react-router-dom\";\nimport EventsList from '../components/EventsList';\nimport eventsNavigation from \"../components/EventsNavigation\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Await, {\n    resolve: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, this);\n}\n_s(EventsPage, \"22Av1LduzrZxSsk8kXUUCix36lQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    // return {isError: true, message: \"Could not fetch events.\"};\n    // throw new Response(JSON.stringify({message: \"Could not fetch events.\"}), {status: 500})\n    return json({\n      message: 'Could not fetch events.'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport async function loader() {\n  //name doesn't matter\n  defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","defer","Await","EventsList","eventsNavigation","jsxDEV","_jsxDEV","EventsPage","_s","events","resolve","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["/Users/a/Desktop/React Projects/routers/routers-project/frontend/src/pages/Events.js"],"sourcesContent":["import {useLoaderData, json, defer, Await} from \"react-router-dom\";\nimport EventsList from '../components/EventsList';\nimport eventsNavigation from \"../components/EventsNavigation\";\n\nfunction EventsPage() {\n const {events} = useLoaderData();\n\n return <Await resolve={events}></Await>\n}\n\nexport default EventsPage;\n\nasync function loadEvents() {\n    const response = await fetch('http://localhost:8080/events');\n\n    if (!response.ok) {\n        // return {isError: true, message: \"Could not fetch events.\"};\n        // throw new Response(JSON.stringify({message: \"Could not fetch events.\"}), {status: 500})\n        return json({message: 'Could not fetch events.'},\n            {\n                status: 500\n            });\n    } else {\n        return response;\n    }\n}\n\nexport async function loader() { //name doesn't matter\n    defer({\n        events: loadEvents(),\n    })\n}"],"mappings":";;AAAA,SAAQA,aAAa,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,QAAO,kBAAkB;AAClE,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,gBAAgB,MAAM,gCAAgC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9D,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM;IAACC;EAAM,CAAC,GAAGV,aAAa,CAAC,CAAC;EAEhC,oBAAOO,OAAA,CAACJ,KAAK;IAACQ,OAAO,EAAED;EAAO;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AACxC;AAACN,EAAA,CAJQD,UAAU;EAAA,QACDR,aAAa;AAAA;AAAAgB,EAAA,GADtBR,UAAU;AAMnB,eAAeA,UAAU;AAEzB,eAAeS,UAAUA,CAAA,EAAG;EACxB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACd;IACA;IACA,OAAOnB,IAAI,CAAC;MAACoB,OAAO,EAAE;IAAyB,CAAC,EAC5C;MACIC,MAAM,EAAE;IACZ,CAAC,CAAC;EACV,CAAC,MAAM;IACH,OAAOJ,QAAQ;EACnB;AACJ;AAEA,OAAO,eAAeK,MAAMA,CAAA,EAAG;EAAE;EAC7BrB,KAAK,CAAC;IACFQ,MAAM,EAAEO,UAAU,CAAC;EACvB,CAAC,CAAC;AACN;AAAC,IAAAD,EAAA;AAAAQ,YAAA,CAAAR,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}