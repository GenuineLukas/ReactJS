{"ast":null,"code":"var _jsxFileName = \"/Users/a/Desktop/React Projects/routers/routers-project/frontend/src/pages/Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json, defer } from \"react-router-dom\";\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  const events = data.events;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventsList, {\n      events: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    // return {isError: true, message: \"Could not fetch events.\"};\n    // throw new Response(JSON.stringify({message: \"Could not fetch events.\"}), {status: 500})\n    return json({\n      message: 'Could not fetch events.'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport async function loader() {\n  //name doesn't matter\n  defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","defer","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","EventsPage","_s","data","events","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["/Users/a/Desktop/React Projects/routers/routers-project/frontend/src/pages/Events.js"],"sourcesContent":["import {useLoaderData, json, defer} from \"react-router-dom\";\nimport EventsList from '../components/EventsList';\n\nfunction EventsPage() {\n const data = useLoaderData();\n const events = data.events;\n\n\n return (\n     <>\n        <EventsList events={events} />\n     </>\n );\n}\n\nexport default EventsPage;\n\nasync function loadEvents() {\n    const response = await fetch('http://localhost:8080/events');\n\n    if (!response.ok) {\n        // return {isError: true, message: \"Could not fetch events.\"};\n        // throw new Response(JSON.stringify({message: \"Could not fetch events.\"}), {status: 500})\n        return json({message: 'Could not fetch events.'},\n            {\n                status: 500\n            });\n    } else {\n        return response;\n    }\n}\n\nexport async function loader() { //name doesn't matter\n    defer({\n        events: loadEvents(),\n    })\n}"],"mappings":";;AAAA,SAAQA,aAAa,EAAEC,IAAI,EAAEC,KAAK,QAAO,kBAAkB;AAC3D,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAMC,IAAI,GAAGV,aAAa,CAAC,CAAC;EAC5B,MAAMW,MAAM,GAAGD,IAAI,CAACC,MAAM;EAG1B,oBACIN,OAAA,CAAAE,SAAA;IAAAK,QAAA,eACGP,OAAA,CAACF,UAAU;MAACQ,MAAM,EAAEA;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBAC/B,CAAC;AAER;AAACP,EAAA,CAVQD,UAAU;EAAA,QACLR,aAAa;AAAA;AAAAiB,EAAA,GADlBT,UAAU;AAYnB,eAAeA,UAAU;AAEzB,eAAeU,UAAUA,CAAA,EAAG;EACxB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACd;IACA;IACA,OAAOpB,IAAI,CAAC;MAACqB,OAAO,EAAE;IAAyB,CAAC,EAC5C;MACIC,MAAM,EAAE;IACZ,CAAC,CAAC;EACV,CAAC,MAAM;IACH,OAAOJ,QAAQ;EACnB;AACJ;AAEA,OAAO,eAAeK,MAAMA,CAAA,EAAG;EAAE;EAC7BtB,KAAK,CAAC;IACFS,MAAM,EAAEO,UAAU,CAAC;EACvB,CAAC,CAAC;AACN;AAAC,IAAAD,EAAA;AAAAQ,YAAA,CAAAR,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}